# Быстрая сортировка
# Возьмём случайный неотсортированный массив чисел
list = [10, 43, 57, 32, 12, -3, -12, 323, 0]

# создаём функцию сортировки, принимающую как аргумент список чисел
def quick_sort(list):
    # вводим переменную длина списка
    length = len(list)
    # если длина списка меньше или равна 1
    # то есть в списке нет элементов
    if length <= 1:
        # возвращаем список
        return list
    # если элементы есть
    else:
        # в качестве основы берём последний элемент
        # методом pop, который также возвращает последний элемент
        # основой может являться любое число, иногда используется randint
        pivot = list.pop()

    # создаём два списка, элементы больше основы и меньше основы
    items_greater = []
    items_lower = []

    # для каждого числа в листе
    for item in list:
        # если число больше основы
        if item > pivot:
            # добавляем его в список элементов больше основы
            items_greater.append(item)
        else:
            # если число меньше или равно основе - добавляем в список
            # элементов меньше основы
            items_lower.append(item)

    # возвращаем список: сортировка элементов меньше основы + основа + сортировка элементов больше основы
    return quick_sort(items_lower) + [pivot] + quick_sort(items_greater)
    # после чего элементы меньше основы и элементы больше основы отдельно проходят функцию заново
    # они также имеют свою основу и делятся на большие и меньшие элементы
    # на каждом цикле неотсортированных цифр становится всё меньше, и в какой то момент
    # в какой то момент делений становится настолько много, что в списке остаётся 2 элемента, потом 1
    # и на следующий цикл одно самое большое число остаётся основой (т. к. мы взяли последнее за основу)
    # остаётся список меньше основы и сама основа в конце после которой вызывается функция сортировки
    # элементов больше основы, список оказывается пустым, значит его длина < 1
    # и мы сталкиваемся с условием описанным выше (возвращать список если он не имеет длины)
    # if length <= 1:
    #     return list

# возвращаемый список оказывается отсортированным,
print(quick_sort(list))
